# Generated by Haxe 4.1.3
# coding: utf-8
import sys

import math as python_lib_Math
import math as Math
import inspect as python_lib_Inspect
import sys as python_lib_Sys
import traceback as python_lib_Traceback
from datetime import datetime as python_lib_datetime_Datetime
from datetime import timezone as python_lib_datetime_Timezone


class _hx_AnonObject:
    _hx_disable_getattr = False
    def __init__(self, fields):
        self.__dict__ = fields
    def __repr__(self):
        return repr(self.__dict__)
    def __contains__(self, item):
        return item in self.__dict__
    def __getitem__(self, item):
        return self.__dict__[item]
    def __getattr__(self, name):
        if (self._hx_disable_getattr):
            raise AttributeError('field does not exist')
        else:
            return None
    def _hx_hasattr(self,field):
        self._hx_disable_getattr = True
        try:
            getattr(self, field)
            self._hx_disable_getattr = False
            return True
        except AttributeError:
            self._hx_disable_getattr = False
            return False



class Enum:
    _hx_class_name = "Enum"
    __slots__ = ("tag", "index", "params")
    _hx_fields = ["tag", "index", "params"]
    _hx_methods = ["__str__"]

    def __init__(self,tag,index,params):
        self.tag = tag
        self.index = index
        self.params = params

    def __str__(self):
        if (self.params is None):
            return self.tag
        else:
            return self.tag + '(' + (', '.join(str(v) for v in self.params)) + ')'



class Class: pass


class Date:
    _hx_class_name = "Date"
    __slots__ = ("date", "dateUTC")
    _hx_fields = ["date", "dateUTC"]
    _hx_statics = ["now", "makeLocal"]

    def __init__(self,year,month,day,hour,_hx_min,sec):
        self.dateUTC = None
        if (year < python_lib_datetime_Datetime.min.year):
            year = python_lib_datetime_Datetime.min.year
        if (day == 0):
            day = 1
        self.date = Date.makeLocal(python_lib_datetime_Datetime(year,(month + 1),day,hour,_hx_min,sec,0))
        self.dateUTC = self.date.astimezone(python_lib_datetime_Timezone.utc)

    @staticmethod
    def now():
        d = Date(2000,0,1,0,0,0)
        d.date = Date.makeLocal(python_lib_datetime_Datetime.now())
        d.dateUTC = d.date.astimezone(python_lib_datetime_Timezone.utc)
        return d

    @staticmethod
    def makeLocal(date):
        try:
            return date.astimezone()
        except BaseException as _g:
            None
            tzinfo = python_lib_datetime_Datetime.now(python_lib_datetime_Timezone.utc).astimezone().tzinfo
            return date.replace(**python__KwArgs_KwArgs_Impl_.fromT(_hx_AnonObject({'tzinfo': tzinfo})))



class Reflect:
    _hx_class_name = "Reflect"
    __slots__ = ()
    _hx_statics = ["compare", "isEnumValue"]

    @staticmethod
    def compare(a,b):
        if ((a is None) and ((b is None))):
            return 0
        if (a is None):
            return 1
        elif (b is None):
            return -1
        elif HxOverrides.eq(a,b):
            return 0
        elif (a > b):
            return 1
        else:
            return -1

    @staticmethod
    def isEnumValue(v):
        if not HxOverrides.eq(v,Enum):
            return isinstance(v,Enum)
        else:
            return False


class Std:
    _hx_class_name = "Std"
    __slots__ = ()
    _hx_statics = ["isOfType", "string"]

    @staticmethod
    def isOfType(v,t):
        if ((v is None) and ((t is None))):
            return False
        if (t is None):
            return False
        if (t == Dynamic):
            return (v is not None)
        isBool = isinstance(v,bool)
        if ((t == Bool) and isBool):
            return True
        if ((((not isBool) and (not (t == Bool))) and (t == Int)) and isinstance(v,int)):
            return True
        vIsFloat = isinstance(v,float)
        tmp = None
        tmp1 = None
        if (((not isBool) and vIsFloat) and (t == Int)):
            f = v
            tmp1 = (((f != Math.POSITIVE_INFINITY) and ((f != Math.NEGATIVE_INFINITY))) and (not python_lib_Math.isnan(f)))
        else:
            tmp1 = False
        if tmp1:
            tmp1 = None
            try:
                tmp1 = int(v)
            except BaseException as _g:
                None
                tmp1 = None
            tmp = (v == tmp1)
        else:
            tmp = False
        if ((tmp and ((v <= 2147483647))) and ((v >= -2147483648))):
            return True
        if (((not isBool) and (t == Float)) and isinstance(v,(float, int))):
            return True
        if (t == str):
            return isinstance(v,str)
        isEnumType = (t == Enum)
        if ((isEnumType and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_constructs")):
            return True
        if isEnumType:
            return False
        isClassType = (t == Class)
        if ((((isClassType and (not isinstance(v,Enum))) and python_lib_Inspect.isclass(v)) and hasattr(v,"_hx_class_name")) and (not hasattr(v,"_hx_constructs"))):
            return True
        if isClassType:
            return False
        tmp = None
        try:
            tmp = isinstance(v,t)
        except BaseException as _g:
            None
            tmp = False
        if tmp:
            return True
        if python_lib_Inspect.isclass(t):
            cls = t
            loop = None
            def _hx_local_1(intf):
                f = (intf._hx_interfaces if (hasattr(intf,"_hx_interfaces")) else [])
                if (f is not None):
                    _g = 0
                    while (_g < len(f)):
                        i = (f[_g] if _g >= 0 and _g < len(f) else None)
                        _g = (_g + 1)
                        if (i == cls):
                            return True
                        else:
                            l = loop(i)
                            if l:
                                return True
                    return False
                else:
                    return False
            loop = _hx_local_1
            currentClass = v.__class__
            result = False
            while (currentClass is not None):
                if loop(currentClass):
                    result = True
                    break
                currentClass = python_Boot.getSuperClass(currentClass)
            return result
        else:
            return False

    @staticmethod
    def string(s):
        return python_Boot.toString1(s,"")


class Float: pass


class Int: pass


class Bool: pass


class Dynamic: pass


class haxe_IMap:
    _hx_class_name = "haxe.IMap"
    __slots__ = ()


class python_HaxeIterator:
    _hx_class_name = "python.HaxeIterator"
    __slots__ = ("it", "x", "has", "checked")
    _hx_fields = ["it", "x", "has", "checked"]
    _hx_methods = ["next", "hasNext"]

    def __init__(self,it):
        self.checked = False
        self.has = False
        self.x = None
        self.it = it

    def next(self):
        if (not self.checked):
            self.hasNext()
        self.checked = False
        return self.x

    def hasNext(self):
        if (not self.checked):
            try:
                self.x = self.it.__next__()
                self.has = True
            except BaseException as _g:
                None
                if Std.isOfType(haxe_Exception.caught(_g).unwrap(),StopIteration):
                    self.has = False
                    self.x = None
                else:
                    raise _g
            self.checked = True
        return self.has



class Test:
    _hx_class_name = "Test"
    __slots__ = ()
    _hx_statics = ["main"]

    @staticmethod
    def main():
        print("#START")
        sm = TestControl()
        sm.Run()
        print("#END")

class TestControl_STATE(Enum):
    __slots__ = ()
    _hx_class_name = "TestControl_STATE"
    _hx_constructs = ["none", "S_0000", "S_0001", "S_0002", "S_0003", "S_0004", "S_0005", "S_0006", "S_0007", "S_0008", "S_END", "S_GSB000", "S_LOP000", "S_LOP000_Check____", "S_LOP000_Next____", "S_RET000", "S_RET001", "S_SBS000", "S_SBS001", "S_START", "S_WAIT1SEC", "unknown"]
TestControl_STATE.none = TestControl_STATE("none", 0, ())
TestControl_STATE.S_0000 = TestControl_STATE("S_0000", 1, ())
TestControl_STATE.S_0001 = TestControl_STATE("S_0001", 2, ())
TestControl_STATE.S_0002 = TestControl_STATE("S_0002", 3, ())
TestControl_STATE.S_0003 = TestControl_STATE("S_0003", 4, ())
TestControl_STATE.S_0004 = TestControl_STATE("S_0004", 5, ())
TestControl_STATE.S_0005 = TestControl_STATE("S_0005", 6, ())
TestControl_STATE.S_0006 = TestControl_STATE("S_0006", 7, ())
TestControl_STATE.S_0007 = TestControl_STATE("S_0007", 8, ())
TestControl_STATE.S_0008 = TestControl_STATE("S_0008", 9, ())
TestControl_STATE.S_END = TestControl_STATE("S_END", 10, ())
TestControl_STATE.S_GSB000 = TestControl_STATE("S_GSB000", 11, ())
TestControl_STATE.S_LOP000 = TestControl_STATE("S_LOP000", 12, ())
TestControl_STATE.S_LOP000_Check____ = TestControl_STATE("S_LOP000_Check____", 13, ())
TestControl_STATE.S_LOP000_Next____ = TestControl_STATE("S_LOP000_Next____", 14, ())
TestControl_STATE.S_RET000 = TestControl_STATE("S_RET000", 15, ())
TestControl_STATE.S_RET001 = TestControl_STATE("S_RET001", 16, ())
TestControl_STATE.S_SBS000 = TestControl_STATE("S_SBS000", 17, ())
TestControl_STATE.S_SBS001 = TestControl_STATE("S_SBS001", 18, ())
TestControl_STATE.S_START = TestControl_STATE("S_START", 19, ())
TestControl_STATE.S_WAIT1SEC = TestControl_STATE("S_WAIT1SEC", 20, ())
TestControl_STATE.unknown = TestControl_STATE("unknown", 21, ())


class TestControl:
    _hx_class_name = "TestControl"
    __slots__ = ("m_curfunc", "m_nextfunc", "m_noWait", "m_funcmap", "MAX_CALLSTACK", "m_callstacks", "m_callstack_level", "m_msg", "m_val", "m_index", "m_S_WAIT1SEC")
    _hx_fields = ["m_curfunc", "m_nextfunc", "m_noWait", "m_funcmap", "MAX_CALLSTACK", "m_callstacks", "m_callstack_level", "m_msg", "m_val", "m_index", "m_S_WAIT1SEC"]
    _hx_methods = ["Update", "Goto", "CheckState", "HasNextState", "NoWait", "GoSubState", "ReturnState", "Start", "IsEnd", "Run", "S_0000", "S_0001", "S_0002", "S_0003", "S_0004", "S_0005", "S_0006", "S_0007", "S_0008", "S_END", "S_GSB000", "S_LOP000", "S_LOP000_Check____", "S_LOP000_Next____", "S_RET000", "S_RET001", "S_SBS000", "S_SBS001", "S_START", "S_WAIT1SEC"]

    def __init__(self):
        self.m_S_WAIT1SEC = None
        self.m_index = None
        self.m_val = None
        self.m_msg = None
        self.m_callstacks = None
        self.m_funcmap = None
        self.m_noWait = None
        self.m_callstack_level = 0
        self.MAX_CALLSTACK = 10
        self.m_curfunc = TestControl_STATE.none
        self.m_nextfunc = TestControl_STATE.none
        _g = []
        _g1 = 0
        _g2 = self.MAX_CALLSTACK
        while (_g1 < _g2):
            i = _g1
            _g1 = (_g1 + 1)
            _g.append(TestControl_STATE.none)
        self.m_callstacks = _g
        _g = haxe_ds_EnumValueMap()
        _g.set(TestControl_STATE.S_0000,self.S_0000)
        _g.set(TestControl_STATE.S_0001,self.S_0001)
        _g.set(TestControl_STATE.S_0002,self.S_0002)
        _g.set(TestControl_STATE.S_0003,self.S_0003)
        _g.set(TestControl_STATE.S_0004,self.S_0004)
        _g.set(TestControl_STATE.S_0005,self.S_0005)
        _g.set(TestControl_STATE.S_0006,self.S_0006)
        _g.set(TestControl_STATE.S_0007,self.S_0007)
        _g.set(TestControl_STATE.S_0008,self.S_0008)
        _g.set(TestControl_STATE.S_END,self.S_END)
        _g.set(TestControl_STATE.S_GSB000,self.S_GSB000)
        _g.set(TestControl_STATE.S_LOP000,self.S_LOP000)
        _g.set(TestControl_STATE.S_LOP000_Check____,self.S_LOP000_Check____)
        _g.set(TestControl_STATE.S_LOP000_Next____,self.S_LOP000_Next____)
        _g.set(TestControl_STATE.S_RET000,self.S_RET000)
        _g.set(TestControl_STATE.S_RET001,self.S_RET001)
        _g.set(TestControl_STATE.S_SBS000,self.S_SBS000)
        _g.set(TestControl_STATE.S_SBS001,self.S_SBS001)
        _g.set(TestControl_STATE.S_START,self.S_START)
        _g.set(TestControl_STATE.S_WAIT1SEC,self.S_WAIT1SEC)
        _g.set(TestControl_STATE.unknown,None)
        self.m_funcmap = _g

    def Update(self):
        while True:
            bFirst = False
            if (self.m_nextfunc != TestControl_STATE.none):
                self.m_curfunc = self.m_nextfunc
                self.m_nextfunc = TestControl_STATE.none
                bFirst = True
            self.m_noWait = False
            if (self.m_curfunc != TestControl_STATE.none):
                self.m_funcmap.get(self.m_curfunc)(bFirst)
            if (not self.m_noWait):
                break

    def Goto(self,func):
        self.m_nextfunc = func

    def CheckState(self,func):
        return (self.m_curfunc == func)

    def HasNextState(self):
        return (self.m_nextfunc != TestControl_STATE.none)

    def NoWait(self):
        self.m_noWait = True

    def GoSubState(self,nextstate,returnstate):
        if (self.m_callstack_level >= ((self.MAX_CALLSTACK - 1))):
            print("CALL STACK OVERFLOW")
            return
        python_internal_ArrayImpl._set(self.m_callstacks, self.m_callstack_level, returnstate)
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.m_callstack_level
        _hx_local_0.m_callstack_level = (_hx_local_1 + 1)
        _hx_local_0.m_callstack_level
        self.Goto(nextstate)

    def ReturnState(self):
        if (self.m_callstack_level <= 0):
            print("CALL STACK UNDERFLOW")
            return
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.m_callstack_level
        _hx_local_0.m_callstack_level = (_hx_local_1 - 1)
        _hx_local_0.m_callstack_level
        nextstate = python_internal_ArrayImpl._get(self.m_callstacks, self.m_callstack_level)
        self.Goto(nextstate)

    def Start(self):
        self.Goto(TestControl_STATE.S_START)

    def IsEnd(self):
        return self.CheckState(TestControl_STATE.S_END)

    def Run(self):
        LOOPMAX = 100000
        bEnd = False
        self.Start()
        _g = 0
        _g1 = LOOPMAX
        while (_g < _g1):
            loop_1 = _g
            _g = (_g + 1)
            if bEnd:
                break
            if (loop_1 >= ((LOOPMAX - 1))):
                print("OUT OF LOOP. INCREASE LOOPMAX OR MODIFY USING WHILE")
            _g2 = 0
            _g3 = LOOPMAX
            while (_g2 < _g3):
                loop_2 = _g2
                _g2 = (_g2 + 1)
                self.Update()
                bEnd = self.IsEnd()
                if bEnd:
                    break

    def S_0000(self,bFirst):
        if bFirst:
            print("Hello World!")
        if (not self.HasNextState()):
            self.Goto(TestControl_STATE.S_0008)

    def S_0001(self,bFirst):
        sec = Date.now().date.second
        n = HxOverrides.mod(sec, 5)
        self.m_val = n
        if (n == 0):
            self.Goto(TestControl_STATE.S_0002)
        elif (n == 1):
            self.Goto(TestControl_STATE.S_0003)
        elif (n == 2):
            self.Goto(TestControl_STATE.S_0004)
        elif (n == 3):
            self.Goto(TestControl_STATE.S_0005)
        else:
            self.Goto(TestControl_STATE.S_0006)

    def S_0002(self,bFirst):
        if bFirst:
            print("Zero")
        if (not self.HasNextState()):
            self.Goto(TestControl_STATE.S_WAIT1SEC)

    def S_0003(self,bFirst):
        if bFirst:
            print("First")
        if (not self.HasNextState()):
            self.Goto(TestControl_STATE.S_WAIT1SEC)

    def S_0004(self,bFirst):
        if bFirst:
            print("Two")
        if (not self.HasNextState()):
            self.Goto(TestControl_STATE.S_WAIT1SEC)

    def S_0005(self,bFirst):
        if bFirst:
            print("Three")
        if (not self.HasNextState()):
            self.Goto(TestControl_STATE.S_WAIT1SEC)

    def S_0006(self,bFirst):
        if bFirst:
            print(str(("" + Std.string(self.m_val))))
        if (not self.HasNextState()):
            self.Goto(TestControl_STATE.S_WAIT1SEC)

    def S_0007(self,bFirst):
        if bFirst:
            print("In Subroutine!")
        if (not self.HasNextState()):
            self.Goto(TestControl_STATE.S_RET000)

    def S_0008(self,bFirst):
        if bFirst:
            self.m_msg = "Use m_msg."
            print(str(self.m_msg))
        if (not self.HasNextState()):
            self.Goto(TestControl_STATE.S_GSB000)

    def S_END(self,bFirst):
        pass

    def S_GSB000(self,bFirst):
        self.GoSubState(TestControl_STATE.S_SBS000,TestControl_STATE.S_LOP000)
        self.NoWait()

    def S_LOP000(self,bFirst):
        self.m_index = 0
        self.Goto(TestControl_STATE.S_LOP000_Check____)
        self.NoWait()

    def S_LOP000_Check____(self,bFirst):
        if (self.m_index < 10):
            self.GoSubState(TestControl_STATE.S_SBS001,TestControl_STATE.S_LOP000_Next____)
        else:
            self.Goto(TestControl_STATE.S_END)
        self.NoWait()

    def S_LOP000_Next____(self,bFirst):
        _hx_local_0 = self
        _hx_local_1 = _hx_local_0.m_index
        _hx_local_0.m_index = (_hx_local_1 + 1)
        _hx_local_1
        self.Goto(TestControl_STATE.S_LOP000_Check____)
        self.NoWait()

    def S_RET000(self,bFirst):
        self.ReturnState()
        self.NoWait()

    def S_RET001(self,bFirst):
        self.ReturnState()
        self.NoWait()

    def S_SBS000(self,bFirst):
        self.Goto(TestControl_STATE.S_0007)
        self.NoWait()

    def S_SBS001(self,bFirst):
        self.Goto(TestControl_STATE.S_0001)
        self.NoWait()

    def S_START(self,bFirst):
        self.Goto(TestControl_STATE.S_0000)
        self.NoWait()

    def S_WAIT1SEC(self,bFirst):
        if bFirst:
            self.m_S_WAIT1SEC = Date.now().date.second
        if (self.m_S_WAIT1SEC == Date.now().date.second):
            return
        if (not self.HasNextState()):
            self.Goto(TestControl_STATE.S_RET001)



class haxe_Exception(Exception):
    _hx_class_name = "haxe.Exception"
    __slots__ = ("_hx___nativeStack", "_hx___nativeException", "_hx___previousException")
    _hx_fields = ["__nativeStack", "__nativeException", "__previousException"]
    _hx_methods = ["unwrap"]
    _hx_statics = ["caught"]
    _hx_interfaces = []
    _hx_super = Exception


    def __init__(self,message,previous = None,native = None):
        self._hx___previousException = None
        self._hx___nativeException = None
        self._hx___nativeStack = None
        super().__init__(message)
        self._hx___previousException = previous
        if ((native is not None) and Std.isOfType(native,BaseException)):
            self._hx___nativeException = native
            self._hx___nativeStack = haxe_NativeStackTrace.exceptionStack()
        else:
            self._hx___nativeException = self
            infos = python_lib_Traceback.extract_stack()
            if (len(infos) != 0):
                infos.pop()
            infos.reverse()
            self._hx___nativeStack = infos

    def unwrap(self):
        return self._hx___nativeException

    @staticmethod
    def caught(value):
        if Std.isOfType(value,haxe_Exception):
            return value
        elif Std.isOfType(value,BaseException):
            return haxe_Exception(str(value),None,value)
        else:
            return haxe_ValueException(value,None,value)



class haxe_NativeStackTrace:
    _hx_class_name = "haxe.NativeStackTrace"
    __slots__ = ()
    _hx_statics = ["saveStack", "exceptionStack"]

    @staticmethod
    def saveStack(exception):
        pass

    @staticmethod
    def exceptionStack():
        exc = python_lib_Sys.exc_info()
        if (exc[2] is not None):
            infos = python_lib_Traceback.extract_tb(exc[2])
            infos.reverse()
            return infos
        else:
            return []


class haxe_ValueException(haxe_Exception):
    _hx_class_name = "haxe.ValueException"
    __slots__ = ("value",)
    _hx_fields = ["value"]
    _hx_methods = ["unwrap"]
    _hx_statics = []
    _hx_interfaces = []
    _hx_super = haxe_Exception


    def __init__(self,value,previous = None,native = None):
        self.value = None
        super().__init__(Std.string(value),previous,native)
        self.value = value

    def unwrap(self):
        return self.value



class haxe_ds_BalancedTree:
    _hx_class_name = "haxe.ds.BalancedTree"
    __slots__ = ("root",)
    _hx_fields = ["root"]
    _hx_methods = ["set", "get", "setLoop", "balance", "compare"]
    _hx_interfaces = [haxe_IMap]

    def __init__(self):
        self.root = None

    def set(self,key,value):
        self.root = self.setLoop(key,value,self.root)

    def get(self,key):
        node = self.root
        while (node is not None):
            c = self.compare(key,node.key)
            if (c == 0):
                return node.value
            if (c < 0):
                node = node.left
            else:
                node = node.right
        return None

    def setLoop(self,k,v,node):
        if (node is None):
            return haxe_ds_TreeNode(None,k,v,None)
        c = self.compare(k,node.key)
        if (c == 0):
            return haxe_ds_TreeNode(node.left,k,v,node.right,(0 if ((node is None)) else node._height))
        elif (c < 0):
            nl = self.setLoop(k,v,node.left)
            return self.balance(nl,node.key,node.value,node.right)
        else:
            nr = self.setLoop(k,v,node.right)
            return self.balance(node.left,node.key,node.value,nr)

    def balance(self,l,k,v,r):
        hl = (0 if ((l is None)) else l._height)
        hr = (0 if ((r is None)) else r._height)
        if (hl > ((hr + 2))):
            _this = l.left
            _this1 = l.right
            if (((0 if ((_this is None)) else _this._height)) >= ((0 if ((_this1 is None)) else _this1._height))):
                return haxe_ds_TreeNode(l.left,l.key,l.value,haxe_ds_TreeNode(l.right,k,v,r))
            else:
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,haxe_ds_TreeNode(l.right.right,k,v,r))
        elif (hr > ((hl + 2))):
            _this = r.right
            _this1 = r.left
            if (((0 if ((_this is None)) else _this._height)) > ((0 if ((_this1 is None)) else _this1._height))):
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right)
            else:
                return haxe_ds_TreeNode(haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right))
        else:
            return haxe_ds_TreeNode(l,k,v,r,(((hl if ((hl > hr)) else hr)) + 1))

    def compare(self,k1,k2):
        return Reflect.compare(k1,k2)



class haxe_ds_TreeNode:
    _hx_class_name = "haxe.ds.TreeNode"
    __slots__ = ("left", "right", "key", "value", "_height")
    _hx_fields = ["left", "right", "key", "value", "_height"]

    def __init__(self,l,k,v,r,h = None):
        if (h is None):
            h = -1
        self._height = None
        self.left = l
        self.key = k
        self.value = v
        self.right = r
        if (h == -1):
            tmp = None
            _this = self.left
            _this1 = self.right
            if (((0 if ((_this is None)) else _this._height)) > ((0 if ((_this1 is None)) else _this1._height))):
                _this = self.left
                tmp = (0 if ((_this is None)) else _this._height)
            else:
                _this = self.right
                tmp = (0 if ((_this is None)) else _this._height)
            self._height = (tmp + 1)
        else:
            self._height = h



class haxe_ds_EnumValueMap(haxe_ds_BalancedTree):
    _hx_class_name = "haxe.ds.EnumValueMap"
    __slots__ = ()
    _hx_fields = []
    _hx_methods = ["compare", "compareArgs", "compareArg"]
    _hx_statics = []
    _hx_interfaces = [haxe_IMap]
    _hx_super = haxe_ds_BalancedTree


    def __init__(self):
        super().__init__()

    def compare(self,k1,k2):
        d = (k1.index - k2.index)
        if (d != 0):
            return d
        p1 = list(k1.params)
        p2 = list(k2.params)
        if ((len(p1) == 0) and ((len(p2) == 0))):
            return 0
        return self.compareArgs(p1,p2)

    def compareArgs(self,a1,a2):
        ld = (len(a1) - len(a2))
        if (ld != 0):
            return ld
        _g = 0
        _g1 = len(a1)
        while (_g < _g1):
            i = _g
            _g = (_g + 1)
            d = self.compareArg((a1[i] if i >= 0 and i < len(a1) else None),(a2[i] if i >= 0 and i < len(a2) else None))
            if (d != 0):
                return d
        return 0

    def compareArg(self,v1,v2):
        if (Reflect.isEnumValue(v1) and Reflect.isEnumValue(v2)):
            return self.compare(v1,v2)
        elif (Std.isOfType(v1,list) and Std.isOfType(v2,list)):
            return self.compareArgs(v1,v2)
        else:
            return Reflect.compare(v1,v2)



class haxe_iterators_ArrayIterator:
    _hx_class_name = "haxe.iterators.ArrayIterator"
    __slots__ = ("array", "current")
    _hx_fields = ["array", "current"]
    _hx_methods = ["hasNext", "next"]

    def __init__(self,array):
        self.current = 0
        self.array = array

    def hasNext(self):
        return (self.current < len(self.array))

    def next(self):
        def _hx_local_3():
            def _hx_local_2():
                _hx_local_0 = self
                _hx_local_1 = _hx_local_0.current
                _hx_local_0.current = (_hx_local_1 + 1)
                return _hx_local_1
            return python_internal_ArrayImpl._get(self.array, _hx_local_2())
        return _hx_local_3()



class python_Boot:
    _hx_class_name = "python.Boot"
    __slots__ = ()
    _hx_statics = ["keywords", "toString1", "fields", "simpleField", "getInstanceFields", "getSuperClass", "getClassFields", "prefixLength", "unhandleKeywords"]

    @staticmethod
    def toString1(o,s):
        if (o is None):
            return "null"
        if isinstance(o,str):
            return o
        if (s is None):
            s = ""
        if (len(s) >= 5):
            return "<...>"
        if isinstance(o,bool):
            if o:
                return "true"
            else:
                return "false"
        if (isinstance(o,int) and (not isinstance(o,bool))):
            return str(o)
        if isinstance(o,float):
            try:
                if (o == int(o)):
                    return str(Math.floor((o + 0.5)))
                else:
                    return str(o)
            except BaseException as _g:
                None
                return str(o)
        if isinstance(o,list):
            o1 = o
            l = len(o1)
            st = "["
            s = (("null" if s is None else s) + "\t")
            _g = 0
            _g1 = l
            while (_g < _g1):
                i = _g
                _g = (_g + 1)
                prefix = ""
                if (i > 0):
                    prefix = ","
                st = (("null" if st is None else st) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1((o1[i] if i >= 0 and i < len(o1) else None),s))))))
            st = (("null" if st is None else st) + "]")
            return st
        try:
            if hasattr(o,"toString"):
                return o.toString()
        except BaseException as _g:
            None
        if hasattr(o,"__class__"):
            if isinstance(o,_hx_AnonObject):
                toStr = None
                try:
                    fields = python_Boot.fields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (("{ " + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " }")
                except BaseException as _g:
                    None
                    return "{ ... }"
                if (toStr is None):
                    return "{ ... }"
                else:
                    return toStr
            if isinstance(o,Enum):
                o1 = o
                l = len(o1.params)
                hasParams = (l > 0)
                if hasParams:
                    paramsStr = ""
                    _g = 0
                    _g1 = l
                    while (_g < _g1):
                        i = _g
                        _g = (_g + 1)
                        prefix = ""
                        if (i > 0):
                            prefix = ","
                        paramsStr = (("null" if paramsStr is None else paramsStr) + HxOverrides.stringOrNull(((("null" if prefix is None else prefix) + HxOverrides.stringOrNull(python_Boot.toString1(o1.params[i],s))))))
                    return (((HxOverrides.stringOrNull(o1.tag) + "(") + ("null" if paramsStr is None else paramsStr)) + ")")
                else:
                    return o1.tag
            if hasattr(o,"_hx_class_name"):
                if (o.__class__.__name__ != "type"):
                    fields = python_Boot.getInstanceFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((HxOverrides.stringOrNull(o._hx_class_name) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
                else:
                    fields = python_Boot.getClassFields(o)
                    _g = []
                    _g1 = 0
                    while (_g1 < len(fields)):
                        f = (fields[_g1] if _g1 >= 0 and _g1 < len(fields) else None)
                        _g1 = (_g1 + 1)
                        x = ((("" + ("null" if f is None else f)) + " : ") + HxOverrides.stringOrNull(python_Boot.toString1(python_Boot.simpleField(o,f),(("null" if s is None else s) + "\t"))))
                        _g.append(x)
                    fieldsStr = _g
                    toStr = (((("#" + HxOverrides.stringOrNull(o._hx_class_name)) + "( ") + HxOverrides.stringOrNull(", ".join([x1 for x1 in fieldsStr]))) + " )")
                    return toStr
            if (o == str):
                return "#String"
            if (o == list):
                return "#Array"
            if callable(o):
                return "function"
            try:
                if hasattr(o,"__repr__"):
                    return o.__repr__()
            except BaseException as _g:
                None
            if hasattr(o,"__str__"):
                return o.__str__([])
            if hasattr(o,"__name__"):
                return o.__name__
            return "???"
        else:
            return str(o)

    @staticmethod
    def fields(o):
        a = []
        if (o is not None):
            if hasattr(o,"_hx_fields"):
                fields = o._hx_fields
                if (fields is not None):
                    return list(fields)
            if isinstance(o,_hx_AnonObject):
                d = o.__dict__
                keys = d.keys()
                handler = python_Boot.unhandleKeywords
                for k in keys:
                    if (k != '_hx_disable_getattr'):
                        a.append(handler(k))
            elif hasattr(o,"__dict__"):
                d = o.__dict__
                keys1 = d.keys()
                for k in keys1:
                    a.append(k)
        return a

    @staticmethod
    def simpleField(o,field):
        if (field is None):
            return None
        field1 = (("_hx_" + field) if ((field in python_Boot.keywords)) else (("_hx_" + field) if (((((len(field) > 2) and ((ord(field[0]) == 95))) and ((ord(field[1]) == 95))) and ((ord(field[(len(field) - 1)]) != 95)))) else field))
        if hasattr(o,field1):
            return getattr(o,field1)
        else:
            return None

    @staticmethod
    def getInstanceFields(c):
        f = (list(c._hx_fields) if (hasattr(c,"_hx_fields")) else [])
        if hasattr(c,"_hx_methods"):
            f = (f + c._hx_methods)
        sc = python_Boot.getSuperClass(c)
        if (sc is None):
            return f
        else:
            scArr = python_Boot.getInstanceFields(sc)
            scMap = set(scArr)
            _g = 0
            while (_g < len(f)):
                f1 = (f[_g] if _g >= 0 and _g < len(f) else None)
                _g = (_g + 1)
                if (not (f1 in scMap)):
                    scArr.append(f1)
            return scArr

    @staticmethod
    def getSuperClass(c):
        if (c is None):
            return None
        try:
            if hasattr(c,"_hx_super"):
                return c._hx_super
            return None
        except BaseException as _g:
            None
        return None

    @staticmethod
    def getClassFields(c):
        if hasattr(c,"_hx_statics"):
            x = c._hx_statics
            return list(x)
        else:
            return []

    @staticmethod
    def unhandleKeywords(name):
        if (HxString.substr(name,0,python_Boot.prefixLength) == "_hx_"):
            real = HxString.substr(name,python_Boot.prefixLength,None)
            if (real in python_Boot.keywords):
                return real
        return name


class python__KwArgs_KwArgs_Impl_:
    _hx_class_name = "python._KwArgs.KwArgs_Impl_"
    __slots__ = ()
    _hx_statics = ["fromT"]

    @staticmethod
    def fromT(d):
        this1 = python_Lib.anonAsDict(d)
        return this1


class python_Lib:
    _hx_class_name = "python.Lib"
    __slots__ = ()
    _hx_statics = ["anonToDict", "anonAsDict"]

    @staticmethod
    def anonToDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__.copy()
        else:
            return None

    @staticmethod
    def anonAsDict(o):
        if isinstance(o,_hx_AnonObject):
            return o.__dict__
        else:
            return None


class python_internal_ArrayImpl:
    _hx_class_name = "python.internal.ArrayImpl"
    __slots__ = ()
    _hx_statics = ["_get", "_set"]

    @staticmethod
    def _get(x,idx):
        if ((idx > -1) and ((idx < len(x)))):
            return x[idx]
        else:
            return None

    @staticmethod
    def _set(x,idx,v):
        l = len(x)
        while (l < idx):
            x.append(None)
            l = (l + 1)
        if (l == idx):
            x.append(v)
        else:
            x[idx] = v
        return v


class HxOverrides:
    _hx_class_name = "HxOverrides"
    __slots__ = ()
    _hx_statics = ["eq", "stringOrNull", "modf", "mod", "mapKwArgs"]

    @staticmethod
    def eq(a,b):
        if (isinstance(a,list) or isinstance(b,list)):
            return a is b
        return (a == b)

    @staticmethod
    def stringOrNull(s):
        if (s is None):
            return "null"
        else:
            return s

    @staticmethod
    def modf(a,b):
        if (b == 0.0):
            return float('nan')
        elif (a < 0):
            if (b < 0):
                return -(-a % (-b))
            else:
                return -(-a % b)
        elif (b < 0):
            return a % (-b)
        else:
            return a % b

    @staticmethod
    def mod(a,b):
        if (a < 0):
            if (b < 0):
                return -(-a % (-b))
            else:
                return -(-a % b)
        elif (b < 0):
            return a % (-b)
        else:
            return a % b

    @staticmethod
    def mapKwArgs(a,v):
        a1 = _hx_AnonObject(python_Lib.anonToDict(a))
        k = python_HaxeIterator(iter(v.keys()))
        while k.hasNext():
            k1 = k.next()
            val = v.get(k1)
            if a1._hx_hasattr(k1):
                x = getattr(a1,k1)
                setattr(a1,val,x)
                delattr(a1,k1)
        return a1


class python_internal_MethodClosure:
    _hx_class_name = "python.internal.MethodClosure"
    __slots__ = ("obj", "func")
    _hx_fields = ["obj", "func"]
    _hx_methods = ["__call__"]

    def __init__(self,obj,func):
        self.obj = obj
        self.func = func

    def __call__(self,*args):
        return self.func(self.obj,*args)



class HxString:
    _hx_class_name = "HxString"
    __slots__ = ()
    _hx_statics = ["substr"]

    @staticmethod
    def substr(s,startIndex,_hx_len = None):
        if (_hx_len is None):
            return s[startIndex:]
        else:
            if (_hx_len == 0):
                return ""
            if (startIndex < 0):
                startIndex = (len(s) + startIndex)
                if (startIndex < 0):
                    startIndex = 0
            return s[startIndex:(startIndex + _hx_len)]

Math.NEGATIVE_INFINITY = float("-inf")
Math.POSITIVE_INFINITY = float("inf")
Math.NaN = float("nan")
Math.PI = python_lib_Math.pi

python_Boot.keywords = set(["and", "del", "from", "not", "with", "as", "elif", "global", "or", "yield", "assert", "else", "if", "pass", "None", "break", "except", "import", "raise", "True", "class", "exec", "in", "return", "False", "continue", "finally", "is", "try", "def", "for", "lambda", "while"])
python_Boot.prefixLength = len("_hx_")

Test.main()
